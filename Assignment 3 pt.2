
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>

using namespace std;

#define MAX_COL 17
#define MAX_ROW 21

int numberOfCol(string filename);
int numberOfRow(string filename);
void transferData(double **tempDrop, int *temp, int *wind, string filename, int row, int col);
double findWindChill(double userTemp, double userWind, double **tempDrop, int *temp, int *wind, int row, int col);

int main(){

	cout << "Welcome to the Wind Chill program" << endl;
	cout << "This program will provide to you wind chill temperature given the air temperature and windspeed" << endl;
	cout << endl;

	double airTemp, windSpeed;

	string filename = "chillAll.txt";
	cout << "Please enter the name of the file:" << endl;
	cin >> filename;
	cout << endl;

	int col = numberOfCol(filename);
	int row = numberOfRow(filename);
	int *temp = new int[col];
	int *wind = new int[row];
	double **tempDrop = new double*[row];
	for (int i = 0; i < row; i++)
		tempDrop[i] = new double[col];

	transferData(tempDrop, temp, wind, filename, row, col);


	//for (int i = 0; i < col; i++){
	//	cout << temp[i] << " ";
	//}
	//cout << endl;
	//for (int i = 0; i < row; i++){
	//	cout << wind[i] << " ";
	//}
	//cout << endl;
	//for (int r = 0; r < row; r++){
	//	for (int c = 0; c < col; c++){
	//		cout << tempdrop[r][c] << " ";
	//	}
	//	cout << endl;
	//}

	//cout << tempdrop[20][16];

	cout << "To exit the program, please input '1' when entering the air temperature" << endl;
	cout << *tempDrop[0];
	while (1) {
		cout << "Please enter an air temperature: ";

		while (1){
			cin >> airTemp;
			if (airTemp <= temp[0] && airTemp >= temp[col])
				break;
			cout << "Please enter a valid air temperature: ";
		}

		if (airTemp == 1)
			break;

		cout << "Please enter the wind speed: ";

		while (1){
			cin >> windSpeed;
			if (windSpeed >= wind[0] && windSpeed <= wind[col])
				break;
			cout << "Please enter a valid wind speed: ";
		}

		cout << endl;
		cout << endl;
		cout << endl;

		cout << "The air temperature is: " << airTemp << endl;
		cout << "The wind speed is: " << windSpeed << endl;
		cout << "The wind chill speed is: " << findWindChill(airTemp, windSpeed, tempDrop, temp, wind, row, col) << endl;
		cout << endl;
	}

	delete tempDrop, wind, temp;
	system("PAUSE");
	return (0);
}
//Checks the number of columns in the file (which is the 1st line of the file)
int numberOfCol(string filename){
	ifstream infile;
	infile.open(filename, ios::in);

	if (infile.fail()){
		cerr << "Error opening file";
		exit(-1);
	}
	int counter = 1;
	char character = 'w';

	while (character != '\n'){
		infile.get(character);
		if (character == ' ')
			counter++;
	}

	infile.close();
	if (counter > MAX_COL){
		cout << "ERROR! FILE EXCEEDS MAXIMUM COLUMNS!";
		exit(-1);
	}
	return counter;
}
//Checks the number of Rows in the file (which is the 2nd line of the file)
int numberOfRow(string filename){
	ifstream infile;
	infile.open(filename, ios::in);

	if (infile.fail()){
		cerr << "Error opening file";
		exit(-1);
	}
	string str;
	getline(infile, str);

	int counter = 1;
	char character = 'a';

	while (character != '\n'){
		infile.get(character);
		if (character == ' ')
			counter++;
	}

	infile.close();
	if (counter > MAX_ROW){
		cout << "ERROR! FILE EXCEEDS MAXIMUM ROWS!";
		exit(-1);
	}
	return counter;
}
//Transfers the rest of the values in the value into the three arrays, tempDrop, temp, and wind
void transferData(double **tempDrop, int *temp, int *wind, string filename, int row, int col){
	ifstream infile;
	infile.open(filename, ios::in);

	if (infile.fail()){
		cerr << "Error opening file";
		exit(-1);
	}

	for (int i = 0; i < col; i++){
		infile >> temp[i];
	}
	for (int i = 0; i < row; i++){
		infile >> wind[i];
	}

	for (int r = 0; r < row; r++){
		for (int c = 0; c < col; c++){
			infile >> tempDrop[r][c];
		}
	}
}
// Calculates Wind Chill Value
double findWindChill(double userTemp, double userWind, double **tempDrop, int *temp, int *wind, int row, int col){
	int closestTemp = 0;
	int closestWind = 0;

	for (int i = 0; i < col; i++){
		if (temp[i] >= userTemp)
			closestTemp = i;
	}
	if (temp[closestTemp] != userTemp){
		double midpoint = (double)(temp[closestTemp] + temp[closestTemp + 1]) / 2.0;
		if (userTemp < midpoint)
			closestTemp++;
	}
	for (int i = 0; i < row; i++){
		if (userWind >= wind[i])
			closestWind = i;
	}
	
	if (wind[closestWind] != userWind){
		double midpoint = (wind[closestWind] + wind[closestWind + 1]) / 2.0;
		if (userWind >= midpoint)
			closestWind++;
	}
	cout << "Temp: " << closestTemp << endl;
	cout << "Wind: " << closestWind << endl;




	//for (int i = 0; i < col - 1; i++){
	//	if ((userTemp <= temp[i]) && (userTemp > temp[i + 1])){
	//		cout << i << endl;
	//		cout << temp[i] << " " << temp[i + 1] << endl;
	//		double midpoint = (temp[i] + temp[i + 1]) / 2.0;
	//		cout << midpoint;
	//		if (midpoint < userTemp)
	//			closestTemp = i;
	//		else if (midpoint > userTemp)
	//			closestTemp = i + 1;
	//		cout << closestTemp << endl;

	//	}

	//}



	//for (int i = 0; i < row - 1; i++){
	//	if (userWind >= wind[i] && userWind < wind[i + 1]){
	//		double midpoint = (wind[i] + wind[i + 1]) / 2;
	//		if (midpoint > userWind)
	//			closestWind = i;
	//		else if (midpoint < userWind)
	//			closestWind = i + 1;
	//	}
	//}

	return userTemp - tempDrop[closestWind][closestTemp];

}
