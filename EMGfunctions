#include <cmath>
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
#define pi 3.1415926
int LoadData(string filename, double EMG[]){
	ifstream infile;
	infile.open(filename);

	int dataCounter = 0; //Stores the number of data points in a given file, will also represent the index of EMG[]

	if (infile.fail()){
		cerr << "Error opening file";
		exit(1);
	}


	/* datapoint1 will be used to filter the time out 
	   datapoin2 will be used to store the data into EMG[]  */
	while (!infile.eof()){
		double datapoint1, datapoint2;
		infile >> datapoint1 >> datapoint2;
		EMG[dataCounter] = datapoint2;
		dataCounter++;
	}
	return dataCounter;

}

void BandPassFilter(double EMG[], int lowFreq, int highFreq, double samplingRate, int size){
	double newEMG[4000], yh[4000], yl[4000];
	yh[0] = EMG[0];
	yl[0] = EMG[0];

	double dt = (1 / samplingRate);
	for (int i = 1; i < size; i++){
		// Calculates yh[i]
		double RC = 1 / (2 * pi * lowFreq);
		double alpha = RC / (RC + dt);
		yh[i] = alpha * (yh[i - 1] + EMG[i] - EMG[i - 1]);
		// --------------------------------------

		// Calculates yl[i]
		RC = 1 / (2 * pi * highFreq);
		alpha = dt / (RC + dt);
		yl[i] = yl[i - 1] + alpha * (EMG[i] - yl[i - 1]);
		// ---------------------------------------

		newEMG[i] = yh[i] - yl[i];
	}
}

void ApplySmoothing(){



}

int ZeroCrossing(double filteredEMG[], int size){

}


