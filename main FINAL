#include <iostream>
#include <fstream>
#include <cmath>
#include <string>

using namespace std;

int LoadData(string, double[]);
void BandPassFilter(double[], int, int, double, int);
void ApplySmoothing(double[], int);
bool isZeroCrossing(double, double);
int ZeroCrossing(double[], int);

#define pi 3.14159265359
#define SIZE 4000

int main(){
	double EMG[SIZE];
	string filename;
	string sentinelValue = "1";

	cout << "Welcome to the Electromyogram Analysis Program" << endl;
	cout << endl;
	cout << "This program will analyse EMG data to assess the functions of muscles and the nerves that control them" << endl;
	while (sentinelValue == "1")
	{
		
		cout << "Please enter the name of the file that contains the EMG data you would like to analyse " << endl;
		cout << "(Please include the extension of the file as well eg. 'EMGfile.txt'): " << endl;
		cin >> filename;
		cout << endl;

		int fileSize = LoadData(filename, EMG);
		BandPassFilter(EMG, 55, 65, 4000, fileSize);
		ApplySmoothing(EMG, fileSize);

		cout << "The number of datapoints in " << filename << " is: ";
		cout << fileSize << endl;
		cout << "The number of zerocrossings in " << filename << " is: ";
		cout << ZeroCrossing(EMG, fileSize) << endl;

		cout << endl;
		cout << endl;

		cout << "If you would like to read another file, please enter 1, otherwise please enter any other key: " << endl;
		cin >> sentinelValue;
	}


	cout << "Closing program..." << endl;
	system("PAUSE");
	return (0);
}





int LoadData(string filename, double EMG[]){
	ifstream infile;
	infile.open(filename);

	int dataCounter = 0; //Stores the number of data points in a given file, will also represent the index of EMG[]

	if (infile.fail()){
		cerr << "Error opening file";
		exit(1);
	}


	/* datapoint1 will be used to filter the time out
	datapoint2 will be used to store the data into EMG[]  */
	while (!infile.eof())
	{
		double datapoint1, datapoint2;
		infile >> datapoint1 >> datapoint2;
		EMG[dataCounter] = datapoint2;
		dataCounter++;
	}
	return dataCounter;

}

void BandPassFilter(double EMG[], int lowFreq, int highFreq, double samplingRate, int size){
	double newEMG[SIZE], yh[SIZE], yl[SIZE];
	yh[0] = EMG[0];
	yl[0] = EMG[0];

	double dt = (1 / samplingRate);
	for (int i = 1; i < SIZE; i++)
	{
		// Calculates yh[i]
		double RC = 1 / (2 * pi * lowFreq);
		double alpha = RC / (RC + dt);
		yh[i] = alpha * (yh[i - 1] + EMG[i] - EMG[i - 1]);
		// --------------------------------------

		// Calculates yl[i]
		RC = 1 / (2 * pi * highFreq);
		alpha = dt / (RC + dt);
		yl[i] = yl[i - 1] + alpha * (EMG[i] - yl[i - 1]);
		// ---------------------------------------

		newEMG[i] = yh[i] - yl[i];
	}

	// Copy new, filtered values into the EMG
	for (int i = 0; i < SIZE; i++){
		EMG[i] = newEMG[i] ;
	}
}

void ApplySmoothing(double EMG[], int size){
	double smoothedEMG[SIZE];

	// Takes average of the last 4 points of EMG[]
	for (int i = 3; i < size; i++)
	{
		smoothedEMG[i] = 0.25*(EMG[i] + EMG[i - 1] + EMG[i - 2] + EMG[i - 3]);
	}


	// Copies new smoothed and filtered array into EMG[]
	for (int i = 3; i < size; i++){
		EMG[i] = smoothedEMG[i];
	}
}

// Auxillary function to use for ZeroCrossing() function
// This function checks if the two numbers changes in sign
bool isZeroCrossing(double datapoint1, double datapoint2){
	if (datapoint1 >= 0)
		if (datapoint2 < 0) // Condition if datapoint 1 is positive and datapoint2 is negative
			return true; 
		else
			return false; // Condition if datapoit 1 is positive and datapoint2 is also positive
	else
		if (datapoint2 > 0) // Condition if datapoint 1 negative and datapoint 2 is positive
			return true;
		else
			return false; // Condition if datapoint 1 is negative and datapoint 2 is also negative

}
int ZeroCrossing(double filteredEMG[], int size){
	int numberOfZeroCrossing = 0;

	for (int i = 0; i < size - 1; i++)
	{
		if (isZeroCrossing(filteredEMG[i], filteredEMG[i + 1]))
			numberOfZeroCrossing++;
	}

	return numberOfZeroCrossing;
}
